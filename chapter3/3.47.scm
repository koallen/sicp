;;;; Answer to exercise 3.47

;; semaphore as mutex
;; mutex protects semaphore, and semaphore protects serializer
(define (make-semaphore n)
  (let ((mutex (make-mutex))
        (occupied 0))
    (define (the-semaphore m)
      (cond ((eq? m 'acquire)
             (mutex 'acquire)
             (if (< occupied n)
                 (begin (set! occupied (+ occupied 1))
                        (mutex 'release))
                 (begin (mutex 'release)
                        (the-semaphore 'acquire))))
            ((eq? m 'release)
             (mutex 'acquire)
             (set! occupied (- occupied 1))
             (mutex 'release))))
    the-semaphore))

;; semaphore as atomic test-and-set! operations
(define (make-semaphore n)
  (let ((occupied 0)
        (cell (list false)))
    (define (the-semaphore m)
      (cond ((eq? m 'acquire)
             (if (test-and-set! cell)
                 (the-semaphore 'acquire)
                 (if (< occupied n)
                     (begin (set! occupied (+ occupied 1))
                            (clear! cell))
                     (begin (clear! cell)
                            (the-semaphore 'acquire)))))
            ((eq? m 'release)
             (if (test-and-set! cell)
                 (the-semaphore 'release)
                 (begin (set! occupied (- occupied 1))
                        (clear! cell))))))
    the-semaphore))
